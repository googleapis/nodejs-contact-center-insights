// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as contactcenterinsightsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ContactCenterInsightsClient', () => {
    it('has servicePath', () => {
        const servicePath = contactcenterinsightsModule.v1.ContactCenterInsightsClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = contactcenterinsightsModule.v1.ContactCenterInsightsClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = contactcenterinsightsModule.v1.ContactCenterInsightsClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.contactCenterInsightsStub, undefined);
        await client.initialize();
        assert(client.contactCenterInsightsStub);
    });

    it('has close method', () => {
        const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createConversation', () => {
        it('invokes createConversation without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation());
            client.innerApiCalls.createConversation = stubSimpleCall(expectedResponse);
            const [response] = await client.createConversation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createConversation without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation());
            client.innerApiCalls.createConversation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createConversation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IConversation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createConversation with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateConversationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createConversation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createConversation(request), expectedError);
            assert((client.innerApiCalls.createConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateConversation', () => {
        it('invokes updateConversation without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest());
            request.conversation = {};
            request.conversation.name = '';
            const expectedHeaderRequestParams = "conversation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation());
            client.innerApiCalls.updateConversation = stubSimpleCall(expectedResponse);
            const [response] = await client.updateConversation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateConversation without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest());
            request.conversation = {};
            request.conversation.name = '';
            const expectedHeaderRequestParams = "conversation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation());
            client.innerApiCalls.updateConversation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateConversation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IConversation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateConversation with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.UpdateConversationRequest());
            request.conversation = {};
            request.conversation.name = '';
            const expectedHeaderRequestParams = "conversation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateConversation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateConversation(request), expectedError);
            assert((client.innerApiCalls.updateConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getConversation', () => {
        it('invokes getConversation without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation());
            client.innerApiCalls.getConversation = stubSimpleCall(expectedResponse);
            const [response] = await client.getConversation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getConversation without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation());
            client.innerApiCalls.getConversation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getConversation(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IConversation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getConversation with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetConversationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getConversation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getConversation(request), expectedError);
            assert((client.innerApiCalls.getConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteConversation', () => {
        it('invokes deleteConversation without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteConversation = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteConversation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteConversation without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteConversation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteConversation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteConversation with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeleteConversationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteConversation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteConversation(request), expectedError);
            assert((client.innerApiCalls.deleteConversation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getAnalysis', () => {
        it('invokes getAnalysis without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis());
            client.innerApiCalls.getAnalysis = stubSimpleCall(expectedResponse);
            const [response] = await client.getAnalysis(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAnalysis without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis());
            client.innerApiCalls.getAnalysis = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAnalysis(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IAnalysis|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getAnalysis with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetAnalysisRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getAnalysis = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAnalysis(request), expectedError);
            assert((client.innerApiCalls.getAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteAnalysis', () => {
        it('invokes deleteAnalysis without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAnalysis = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteAnalysis(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAnalysis without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAnalysis = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAnalysis(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteAnalysis with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeleteAnalysisRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAnalysis = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteAnalysis(request), expectedError);
            assert((client.innerApiCalls.deleteAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIssueModel', () => {
        it('invokes getIssueModel without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.IssueModel());
            client.innerApiCalls.getIssueModel = stubSimpleCall(expectedResponse);
            const [response] = await client.getIssueModel(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIssueModel as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIssueModel without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.IssueModel());
            client.innerApiCalls.getIssueModel = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIssueModel(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IIssueModel|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIssueModel as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIssueModel with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetIssueModelRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIssueModel = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIssueModel(request), expectedError);
            assert((client.innerApiCalls.getIssueModel as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listIssueModels', () => {
        it('invokes listIssueModels without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsResponse());
            client.innerApiCalls.listIssueModels = stubSimpleCall(expectedResponse);
            const [response] = await client.listIssueModels(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listIssueModels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listIssueModels without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsResponse());
            client.innerApiCalls.listIssueModels = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listIssueModels(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IListIssueModelsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listIssueModels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listIssueModels with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssueModelsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listIssueModels = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listIssueModels(request), expectedError);
            assert((client.innerApiCalls.listIssueModels as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIssue', () => {
        it('invokes getIssue without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Issue());
            client.innerApiCalls.getIssue = stubSimpleCall(expectedResponse);
            const [response] = await client.getIssue(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIssue as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIssue without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Issue());
            client.innerApiCalls.getIssue = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIssue(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IIssue|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIssue as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIssue with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetIssueRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIssue = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIssue(request), expectedError);
            assert((client.innerApiCalls.getIssue as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listIssues', () => {
        it('invokes listIssues without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssuesResponse());
            client.innerApiCalls.listIssues = stubSimpleCall(expectedResponse);
            const [response] = await client.listIssues(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listIssues as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listIssues without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssuesResponse());
            client.innerApiCalls.listIssues = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listIssues(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IListIssuesResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listIssues as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listIssues with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListIssuesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listIssues = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listIssues(request), expectedError);
            assert((client.innerApiCalls.listIssues as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('calculateIssueModelStats', () => {
        it('invokes calculateIssueModelStats without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest());
            request.issueModel = '';
            const expectedHeaderRequestParams = "issue_model=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsResponse());
            client.innerApiCalls.calculateIssueModelStats = stubSimpleCall(expectedResponse);
            const [response] = await client.calculateIssueModelStats(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.calculateIssueModelStats as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes calculateIssueModelStats without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest());
            request.issueModel = '';
            const expectedHeaderRequestParams = "issue_model=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsResponse());
            client.innerApiCalls.calculateIssueModelStats = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.calculateIssueModelStats(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.ICalculateIssueModelStatsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.calculateIssueModelStats as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes calculateIssueModelStats with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateIssueModelStatsRequest());
            request.issueModel = '';
            const expectedHeaderRequestParams = "issue_model=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.calculateIssueModelStats = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.calculateIssueModelStats(request), expectedError);
            assert((client.innerApiCalls.calculateIssueModelStats as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createPhraseMatcher', () => {
        it('invokes createPhraseMatcher without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher());
            client.innerApiCalls.createPhraseMatcher = stubSimpleCall(expectedResponse);
            const [response] = await client.createPhraseMatcher(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createPhraseMatcher without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher());
            client.innerApiCalls.createPhraseMatcher = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createPhraseMatcher(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createPhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createPhraseMatcher with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreatePhraseMatcherRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createPhraseMatcher = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createPhraseMatcher(request), expectedError);
            assert((client.innerApiCalls.createPhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getPhraseMatcher', () => {
        it('invokes getPhraseMatcher without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher());
            client.innerApiCalls.getPhraseMatcher = stubSimpleCall(expectedResponse);
            const [response] = await client.getPhraseMatcher(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getPhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getPhraseMatcher without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher());
            client.innerApiCalls.getPhraseMatcher = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getPhraseMatcher(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getPhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getPhraseMatcher with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetPhraseMatcherRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getPhraseMatcher = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getPhraseMatcher(request), expectedError);
            assert((client.innerApiCalls.getPhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deletePhraseMatcher', () => {
        it('invokes deletePhraseMatcher without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePhraseMatcher = stubSimpleCall(expectedResponse);
            const [response] = await client.deletePhraseMatcher(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deletePhraseMatcher without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deletePhraseMatcher = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deletePhraseMatcher(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deletePhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deletePhraseMatcher with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.DeletePhraseMatcherRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deletePhraseMatcher = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deletePhraseMatcher(request), expectedError);
            assert((client.innerApiCalls.deletePhraseMatcher as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('calculateStats', () => {
        it('invokes calculateStats without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest());
            request.location = '';
            const expectedHeaderRequestParams = "location=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateStatsResponse());
            client.innerApiCalls.calculateStats = stubSimpleCall(expectedResponse);
            const [response] = await client.calculateStats(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.calculateStats as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes calculateStats without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest());
            request.location = '';
            const expectedHeaderRequestParams = "location=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateStatsResponse());
            client.innerApiCalls.calculateStats = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.calculateStats(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.ICalculateStatsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.calculateStats as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes calculateStats with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CalculateStatsRequest());
            request.location = '';
            const expectedHeaderRequestParams = "location=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.calculateStats = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.calculateStats(request), expectedError);
            assert((client.innerApiCalls.calculateStats as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getSettings', () => {
        it('invokes getSettings without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Settings());
            client.innerApiCalls.getSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getSettings without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Settings());
            client.innerApiCalls.getSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.ISettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getSettings with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.GetSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSettings(request), expectedError);
            assert((client.innerApiCalls.getSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateSettings', () => {
        it('invokes updateSettings without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest());
            request.settings = {};
            request.settings.name = '';
            const expectedHeaderRequestParams = "settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Settings());
            client.innerApiCalls.updateSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.updateSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateSettings without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest());
            request.settings = {};
            request.settings.name = '';
            const expectedHeaderRequestParams = "settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Settings());
            client.innerApiCalls.updateSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateSettings(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.ISettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateSettings with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.UpdateSettingsRequest());
            request.settings = {};
            request.settings.name = '';
            const expectedHeaderRequestParams = "settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateSettings(request), expectedError);
            assert((client.innerApiCalls.updateSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createAnalysis', () => {
        it('invokes createAnalysis without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createAnalysis = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createAnalysis(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createAnalysis without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createAnalysis = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAnalysis(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.contactcenterinsights.v1.IAnalysis, protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.contactcenterinsights.v1.IAnalysis, protos.google.cloud.contactcenterinsights.v1.ICreateAnalysisOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createAnalysis with call error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createAnalysis = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createAnalysis(request), expectedError);
            assert((client.innerApiCalls.createAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createAnalysis with LRO error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.CreateAnalysisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createAnalysis = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createAnalysis(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createAnalysis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateAnalysisProgress without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateAnalysisProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateAnalysisProgress with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateAnalysisProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportInsightsData', () => {
        it('invokes exportInsightsData without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportInsightsData = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportInsightsData(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.exportInsightsData as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes exportInsightsData without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportInsightsData = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportInsightsData(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse, protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataResponse, protos.google.cloud.contactcenterinsights.v1.IExportInsightsDataMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.exportInsightsData as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes exportInsightsData with call error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.exportInsightsData = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportInsightsData(request), expectedError);
            assert((client.innerApiCalls.exportInsightsData as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes exportInsightsData with LRO error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ExportInsightsDataRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.exportInsightsData = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportInsightsData(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.exportInsightsData as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkExportInsightsDataProgress without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportInsightsDataProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportInsightsDataProgress with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportInsightsDataProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listConversations', () => {
        it('invokes listConversations without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
            ];
            client.innerApiCalls.listConversations = stubSimpleCall(expectedResponse);
            const [response] = await client.listConversations(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listConversations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listConversations without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
            ];
            client.innerApiCalls.listConversations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listConversations(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IConversation[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listConversations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listConversations with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listConversations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listConversations(request), expectedError);
            assert((client.innerApiCalls.listConversations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listConversationsStream without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
            ];
            client.descriptors.page.listConversations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listConversationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.contactcenterinsights.v1.Conversation[] = [];
                stream.on('data', (response: protos.google.cloud.contactcenterinsights.v1.Conversation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listConversations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listConversations, request));
            assert.strictEqual(
                (client.descriptors.page.listConversations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listConversationsStream with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listConversations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listConversationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.contactcenterinsights.v1.Conversation[] = [];
                stream.on('data', (response: protos.google.cloud.contactcenterinsights.v1.Conversation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listConversations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listConversations, request));
            assert.strictEqual(
                (client.descriptors.page.listConversations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listConversations without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Conversation()),
            ];
            client.descriptors.page.listConversations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.contactcenterinsights.v1.IConversation[] = [];
            const iterable = client.listConversationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listConversations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listConversations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listConversations with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListConversationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listConversations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listConversationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.contactcenterinsights.v1.IConversation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listConversations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listConversations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listAnalyses', () => {
        it('invokes listAnalyses without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
            ];
            client.innerApiCalls.listAnalyses = stubSimpleCall(expectedResponse);
            const [response] = await client.listAnalyses(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAnalyses as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAnalyses without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
            ];
            client.innerApiCalls.listAnalyses = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAnalyses(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IAnalysis[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAnalyses as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listAnalyses with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listAnalyses = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAnalyses(request), expectedError);
            assert((client.innerApiCalls.listAnalyses as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAnalysesStream without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
            ];
            client.descriptors.page.listAnalyses.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAnalysesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.contactcenterinsights.v1.Analysis[] = [];
                stream.on('data', (response: protos.google.cloud.contactcenterinsights.v1.Analysis) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAnalyses.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAnalyses, request));
            assert.strictEqual(
                (client.descriptors.page.listAnalyses.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listAnalysesStream with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listAnalyses.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAnalysesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.contactcenterinsights.v1.Analysis[] = [];
                stream.on('data', (response: protos.google.cloud.contactcenterinsights.v1.Analysis) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAnalyses.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAnalyses, request));
            assert.strictEqual(
                (client.descriptors.page.listAnalyses.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listAnalyses without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.Analysis()),
            ];
            client.descriptors.page.listAnalyses.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.contactcenterinsights.v1.IAnalysis[] = [];
            const iterable = client.listAnalysesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAnalyses.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listAnalyses.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listAnalyses with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListAnalysesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listAnalyses.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAnalysesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.contactcenterinsights.v1.IAnalysis[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAnalyses.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listAnalyses.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listPhraseMatchers', () => {
        it('invokes listPhraseMatchers without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
            ];
            client.innerApiCalls.listPhraseMatchers = stubSimpleCall(expectedResponse);
            const [response] = await client.listPhraseMatchers(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPhraseMatchers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPhraseMatchers without error using callback', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
            ];
            client.innerApiCalls.listPhraseMatchers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPhraseMatchers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listPhraseMatchers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listPhraseMatchers with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listPhraseMatchers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPhraseMatchers(request), expectedError);
            assert((client.innerApiCalls.listPhraseMatchers as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPhraseMatchersStream without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
            ];
            client.descriptors.page.listPhraseMatchers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPhraseMatchersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher[] = [];
                stream.on('data', (response: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPhraseMatchers, request));
            assert.strictEqual(
                (client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listPhraseMatchersStream with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listPhraseMatchers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPhraseMatchersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher[] = [];
                stream.on('data', (response: protos.google.cloud.contactcenterinsights.v1.PhraseMatcher) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPhraseMatchers, request));
            assert.strictEqual(
                (client.descriptors.page.listPhraseMatchers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPhraseMatchers without error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
              generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.PhraseMatcher()),
            ];
            client.descriptors.page.listPhraseMatchers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[] = [];
            const iterable = client.listPhraseMatchersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listPhraseMatchers with error', async () => {
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.contactcenterinsights.v1.ListPhraseMatchersRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listPhraseMatchers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPhraseMatchersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.contactcenterinsights.v1.IPhraseMatcher[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listPhraseMatchers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('analysis', () => {
            const fakePath = "/rendered/path/analysis";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                conversation: "conversationValue",
                analysis: "analysisValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.analysisPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.analysisPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('analysisPath', () => {
                const result = client.analysisPath("projectValue", "locationValue", "conversationValue", "analysisValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.analysisPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAnalysisName', () => {
                const result = client.matchProjectFromAnalysisName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAnalysisName', () => {
                const result = client.matchLocationFromAnalysisName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversationFromAnalysisName', () => {
                const result = client.matchConversationFromAnalysisName(fakePath);
                assert.strictEqual(result, "conversationValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAnalysisFromAnalysisName', () => {
                const result = client.matchAnalysisFromAnalysisName(fakePath);
                assert.strictEqual(result, "analysisValue");
                assert((client.pathTemplates.analysisPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversation', () => {
            const fakePath = "/rendered/path/conversation";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                conversation: "conversationValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversationPath', () => {
                const result = client.conversationPath("projectValue", "locationValue", "conversationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromConversationName', () => {
                const result = client.matchProjectFromConversationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.conversationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromConversationName', () => {
                const result = client.matchLocationFromConversationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.conversationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversationFromConversationName', () => {
                const result = client.matchConversationFromConversationName(fakePath);
                assert.strictEqual(result, "conversationValue");
                assert((client.pathTemplates.conversationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('issue', () => {
            const fakePath = "/rendered/path/issue";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                issue_model: "issueModelValue",
                issue: "issueValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.issuePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.issuePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('issuePath', () => {
                const result = client.issuePath("projectValue", "locationValue", "issueModelValue", "issueValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.issuePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromIssueName', () => {
                const result = client.matchProjectFromIssueName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.issuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromIssueName', () => {
                const result = client.matchLocationFromIssueName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.issuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIssueModelFromIssueName', () => {
                const result = client.matchIssueModelFromIssueName(fakePath);
                assert.strictEqual(result, "issueModelValue");
                assert((client.pathTemplates.issuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIssueFromIssueName', () => {
                const result = client.matchIssueFromIssueName(fakePath);
                assert.strictEqual(result, "issueValue");
                assert((client.pathTemplates.issuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('issueModel', () => {
            const fakePath = "/rendered/path/issueModel";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                issue_model: "issueModelValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.issueModelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.issueModelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('issueModelPath', () => {
                const result = client.issueModelPath("projectValue", "locationValue", "issueModelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.issueModelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromIssueModelName', () => {
                const result = client.matchProjectFromIssueModelName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.issueModelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromIssueModelName', () => {
                const result = client.matchLocationFromIssueModelName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.issueModelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIssueModelFromIssueModelName', () => {
                const result = client.matchIssueModelFromIssueModelName(fakePath);
                assert.strictEqual(result, "issueModelValue");
                assert((client.pathTemplates.issueModelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('phraseMatcher', () => {
            const fakePath = "/rendered/path/phraseMatcher";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                phrase_matcher: "phraseMatcherValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.phraseMatcherPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.phraseMatcherPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('phraseMatcherPath', () => {
                const result = client.phraseMatcherPath("projectValue", "locationValue", "phraseMatcherValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.phraseMatcherPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromPhraseMatcherName', () => {
                const result = client.matchProjectFromPhraseMatcherName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.phraseMatcherPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromPhraseMatcherName', () => {
                const result = client.matchLocationFromPhraseMatcherName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.phraseMatcherPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPhraseMatcherFromPhraseMatcherName', () => {
                const result = client.matchPhraseMatcherFromPhraseMatcherName(fakePath);
                assert.strictEqual(result, "phraseMatcherValue");
                assert((client.pathTemplates.phraseMatcherPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('settings', () => {
            const fakePath = "/rendered/path/settings";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new contactcenterinsightsModule.v1.ContactCenterInsightsClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.settingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.settingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('settingsPath', () => {
                const result = client.settingsPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.settingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSettingsName', () => {
                const result = client.matchProjectFromSettingsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.settingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSettingsName', () => {
                const result = client.matchLocationFromSettingsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.settingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
